{"version":3,"file":"default-node_modules_angular_material_fesm2020_dialog_mjs.js","mappings":"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","sources":["./node_modules/@angular/cdk/fesm2020/dialog.mjs","./node_modules/@angular/material/fesm2020/dialog.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayRef, OverlayModule } from '@angular/cdk/overlay';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, InjectFlags, Injectable, SkipSelf, NgModule } from '@angular/core';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Optional CSS class or classes applied to the overlay panel. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Optional CSS class or classes applied to the overlay backdrop. */\n        this.backdropClass = '';\n        /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Dialog label applied via `aria-label` */\n        this.ariaLabel = null;\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the previously-focused element upon closing.\n         * Has the following behavior based on the type that is passed in:\n         * - `boolean` - when true, will return focus to the element that was focused before the dialog\n         *    was opened, otherwise won't restore focus at all.\n         * - `string` - focus will be restored to the first element that matches the CSS selector.\n         * - `HTMLElement` - focus will be restored to the specific element.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user navigates backwards or forwards through browser\n         * history. This does not apply to navigation via anchor element unless using URL-hash based\n         * routing (`HashLocationStrategy` in the Angular router).\n         */\n        this.closeOnNavigation = true;\n        /**\n         * Whether the dialog should close when the dialog service is destroyed. This is useful if\n         * another service is wrapping the dialog and is managing the destruction instead.\n         */\n        this.closeOnDestroy = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction throwDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _document, _config, _interactivityChecker, _ngZone, _overlayRef, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._config = _config;\n        this._interactivityChecker = _interactivityChecker;\n        this._ngZone = _ngZone;\n        this._overlayRef = _overlayRef;\n        this._focusMonitor = _focusMonitor;\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwDialogContentAlreadyAttachedError();\n            }\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._contentAttached();\n            return result;\n        };\n        this._ariaLabelledBy = this._config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    _contentAttached() {\n        this._initializeFocusTrap();\n        this._handleBackdropClicks();\n        this._captureInitialFocus();\n    }\n    /**\n     * Can be used by child classes to customize the initial focus\n     * capturing behavior (e.g. if it's tied to an animation).\n     */\n    _captureInitialFocus() {\n        this._trapFocus();\n    }\n    ngOnDestroy() {\n        this._restoreFocus();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n    /** Captures focus if it isn't already inside the dialog. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        const element = this._elementRef.nativeElement;\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n        // dialog. If the element inside the dialog can't be focused, then the container is focused\n        // so the user can't tab into other elements behind it.\n        switch (this._config.autoFocus) {\n            case false:\n            case 'dialog':\n                // Ensure that focus is on the dialog container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the dialog already, because it's possible that the consumer\n                // turned off `autoFocus` in order to move focus themselves.\n                if (!this._containsFocus()) {\n                    element.focus();\n                }\n                break;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap.focusInitialElementWhenReady().then(focusedSuccessfully => {\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this._config.autoFocus);\n                break;\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const focusConfig = this._config.restoreFocus;\n        let focusTargetElement = null;\n        if (typeof focusConfig === 'string') {\n            focusTargetElement = this._document.querySelector(focusConfig);\n        }\n        else if (typeof focusConfig === 'boolean') {\n            focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n        }\n        else if (focusConfig) {\n            focusTargetElement = focusConfig;\n        }\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            focusTargetElement &&\n            typeof focusTargetElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    focusTargetElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Sets up the focus trap. */\n    _initializeFocusTrap() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n        }\n    }\n    /** Sets up the listener that handles clicks on the dialog backdrop. */\n    _handleBackdropClicks() {\n        // Clicking on the backdrop will move focus out of dialog.\n        // Recapture it if closing via the backdrop is disabled.\n        this._overlayRef.backdropClick().subscribe(() => {\n            if (this._config.disableClose) {\n                this._recaptureFocus();\n            }\n        });\n    }\n}\nCdkDialogContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: DialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\nCdkDialogContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkDialogContainer, selector: \"cdk-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.id\": \"_config.id || null\", \"attr.role\": \"_config.role\", \"attr.aria-modal\": \"_config.ariaModal\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledBy\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\" }, classAttribute: \"cdk-dialog-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"], dependencies: [{ kind: \"directive\", type: i3.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, host: {\n                        'class': 'cdk-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.id]': '_config.id || null',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    }, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DialogConfig]\n                }] }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i1.FocusMonitor }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n    constructor(overlayRef, config) {\n        this.overlayRef = overlayRef;\n        this.config = config;\n        /** Emits when the dialog has been closed. */\n        this.closed = new Subject();\n        this.disableClose = config.disableClose;\n        this.backdropClick = overlayRef.backdropClick();\n        this.keydownEvents = overlayRef.keydownEvents();\n        this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n        this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n        this.keydownEvents.subscribe(event => {\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this.close(undefined, { focusOrigin: 'keyboard' });\n            }\n        });\n        this.backdropClick.subscribe(() => {\n            if (!this.disableClose) {\n                this.close(undefined, { focusOrigin: 'mouse' });\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param result Optional result to return to the dialog opener.\n     * @param options Additional options to customize the closing behavior.\n     */\n    close(result, options) {\n        if (this.containerInstance) {\n            const closedSubject = this.closed;\n            this.containerInstance._closeInteractionType = options?.focusOrigin || 'program';\n            this.overlayRef.dispose();\n            closedSubject.next(result);\n            closedSubject.complete();\n            this.componentInstance = this.containerInstance = null;\n        }\n    }\n    /** Updates the position of the dialog based on the current position strategy. */\n    updatePosition() {\n        this.overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this.overlayRef.updateSize({ width, height });\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this.overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this.overlayRef.removePanelClass(classes);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy');\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/** @docs-private */\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Unique id for the created dialog. */\nlet uniqueId = 0;\nclass Dialog {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        const defaults = (this._defaultOptions || new DialogConfig());\n        config = { ...defaults, ...config };\n        config.id = config.id || `cdk-dialog-${uniqueId++}`;\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayConfig = this._getOverlayConfig(config);\n        const overlayRef = this._overlay.create(overlayConfig);\n        const dialogRef = new DialogRef(overlayRef, config);\n        const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n        dialogRef.containerInstance = dialogContainer;\n        this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        reverseForEach(this.openDialogs, dialog => dialog.close());\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n        // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n        // determines when `aria-hidden` is removed from elements outside the dialog.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => {\n            // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n            if (dialog.config.closeOnDestroy === false) {\n                this._removeOpenDialog(dialog, false);\n            }\n        });\n        // Make a second pass and close the remaining dialogs. We do this second pass in order to\n        // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n        // that should be closed and dialogs that should not.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n        this._openDialogsAtThisLevel = [];\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(config) {\n        const state = new OverlayConfig({\n            positionStrategy: config.positionStrategy ||\n                this._overlay.position().global().centerHorizontally().centerVertically(),\n            scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n            panelClass: config.panelClass,\n            hasBackdrop: config.hasBackdrop,\n            direction: config.direction,\n            minWidth: config.minWidth,\n            minHeight: config.minHeight,\n            maxWidth: config.maxWidth,\n            maxHeight: config.maxHeight,\n            width: config.width,\n            height: config.height,\n            disposeOnNavigation: config.closeOnNavigation,\n        });\n        if (config.backdropClass) {\n            state.backdropClass = config.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachContainer(overlay, dialogRef, config) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DialogConfig, useValue: config },\n            { provide: DialogRef, useValue: dialogRef },\n            { provide: OverlayRef, useValue: overlay },\n        ];\n        let containerType;\n        if (config.container) {\n            if (typeof config.container === 'function') {\n                containerType = config.container;\n            }\n            else {\n                containerType = config.container.type;\n                providers.push(...config.container.providers(config));\n            }\n        }\n        else {\n            containerType = CdkDialogContainer;\n        }\n        const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({ parent: userInjector || this._injector, providers }), config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param config Configuration used to open the dialog.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n            let context = { $implicit: config.data, dialogRef };\n            if (config.templateContext) {\n                context = {\n                    ...context,\n                    ...(typeof config.templateContext === 'function'\n                        ? config.templateContext()\n                        : config.templateContext),\n                };\n            }\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n     * dialog injector, if the user didn't provide a custom one.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DIALOG_DATA, useValue: config.data },\n            { provide: DialogRef, useValue: dialogRef },\n        ];\n        if (config.providers) {\n            if (typeof config.providers === 'function') {\n                providers.push(...config.providers(dialogRef, config, dialogContainer));\n            }\n            else {\n                providers.push(...config.providers);\n            }\n        }\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || fallbackInjector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     * @param emitEvent Whether to emit an event if this is the last dialog.\n     */\n    _removeOpenDialog(dialogRef, emitEvent) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                if (emitEvent) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        }\n    }\n    /** Hides all of the content that isn't an overlay from assistive technology. */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                const sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n}\nDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: Dialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: DEFAULT_DIALOG_CONFIG, optional: true }, { token: Dialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: DIALOG_SCROLL_STRATEGY }], target: i0.ɵɵFactoryTarget.Injectable });\nDialog.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: Dialog });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: Dialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: DialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DEFAULT_DIALOG_CONFIG]\n                }] }, { type: Dialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DIALOG_SCROLL_STRATEGY]\n                }] }]; } });\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n    let i = items.length;\n    while (i--) {\n        callback(items[i]);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DialogModule {\n}\nDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: DialogModule, declarations: [CdkDialogContainer], imports: [OverlayModule, PortalModule, A11yModule], exports: [\n        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n        // don't have to remember to import it or be faced with an unhelpful error.\n        PortalModule,\n        CdkDialogContainer] });\nDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DialogModule, providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [OverlayModule, PortalModule, A11yModule, \n        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n        // don't have to remember to import it or be faced with an unhelpful error.\n        PortalModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: DialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, A11yModule],\n                    exports: [\n                        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n                        // don't have to remember to import it or be faced with an unhelpful error.\n                        PortalModule,\n                        CdkDialogContainer,\n                    ],\n                    declarations: [CdkDialogContainer],\n                    providers: [Dialog, DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError };\n","import { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Optional, Inject, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\nconst defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', group([\n            animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), defaultParams),\n        transition('* => void, * => exit', group([\n            animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), defaultParams),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /** Whether to wait for the opening animation to finish before trapping focus. */\n        this.delayFocusTrap = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        /** Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). */\n        this.enterAnimationDuration = defaultParams.params.enterAnimationDuration;\n        /** Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). */\n        this.exitAnimationDuration = defaultParams.params.exitAnimationDuration;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n// tslint:disable-next-line:validate-decorators\nclass _MatDialogContainerBase extends CdkDialogContainer {\n    constructor(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor) {\n        super(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n    }\n    _captureInitialFocus() {\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Callback for when the open dialog animation has finished. Intended to\n     * be called by sub-classes that use different animation implementations.\n     */\n    _openAnimationDone(totalTime) {\n        if (this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n        this._animationStateChanged.next({ state: 'opened', totalTime });\n    }\n}\n_MatDialogContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatDialogContainerBase, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\n_MatDialogContainerBase.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: _MatDialogContainerBase, selector: \"ng-component\", usesInheritance: true, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatDialogContainerBase, decorators: [{\n            type: Component,\n            args: [{ template: '' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i1.FocusMonitor }]; } });\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, _changeDetectorRef, focusMonitor) {\n        super(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, focusMonitor);\n        this._changeDetectorRef = _changeDetectorRef;\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._openAnimationDone(totalTime);\n        }\n        else if (toState === 'exit') {\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    _getAnimationState() {\n        return {\n            value: this._state,\n            params: {\n                'enterAnimationDuration': this._config.enterAnimationDuration || defaultParams.params.enterAnimationDuration,\n                'exitAnimationDuration': this._config.exitAnimationDuration || defaultParams.params.exitAnimationDuration,\n            },\n        };\n    }\n}\nMatDialogContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\nMatDialogContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatDialogContainer, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, listeners: { \"@dialogContainer.start\": \"_onAnimationStart($event)\", \"@dialogContainer.done\": \"_onAnimationDone($event)\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledBy\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"@dialogContainer\": \"_getAnimationState()\" }, classAttribute: \"mat-dialog-container\" }, usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: i4.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matDialogAnimations.dialogContainer], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, animations: [matDialogAnimations.dialogContainer], host: {\n                        'class': 'mat-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[@dialogContainer]': `_getAnimationState()`,\n                        '(@dialogContainer.start)': '_onAnimationStart($event)',\n                        '(@dialogContainer.done)': '_onAnimationDone($event)',\n                    }, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_ref, config, _containerInstance) {\n        this._ref = _ref;\n        this._containerInstance = _containerInstance;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* MatDialogState.OPEN */;\n        this.disableClose = config.disableClose;\n        this.id = _ref.id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _ref.overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._finishDialogClose();\n        });\n        merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n            if (!this.disableClose) {\n                event.preventDefault();\n                _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._ref.overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* MatDialogState.CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._ref.config.positionStrategy;\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._ref.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._ref.updateSize(width, height);\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._ref.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._ref.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* MatDialogState.CLOSED */;\n        this._ref.close(this._result, { focusOrigin: this._closeInteractionType });\n        this.componentInstance = null;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    ref._closeInteractionType = interactionType;\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, injector, _defaultOptions, _parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n        this._overlay = _overlay;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._idPrefix = 'mat-dialog-';\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n        this._dialog = injector.get(Dialog);\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        let dialogRef;\n        config = { ...(this._defaultOptions || new MatDialogConfig()), ...config };\n        config.id = config.id || `${this._idPrefix}${uniqueId++}`;\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n        const cdkRef = this._dialog.open(componentOrTemplateRef, {\n            ...config,\n            positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n            // Disable closing since we need to sync it up to the animation ourselves.\n            disableClose: true,\n            // Disable closing on destroy, because this service cleans up its open dialogs as well.\n            // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n            // the dialogs immediately whereas we want it to wait for the animations to finish.\n            closeOnDestroy: false,\n            container: {\n                type: this._dialogContainerType,\n                providers: () => [\n                    // Provide our config as the CDK config as well since it has the same interface as the\n                    // CDK one, but it contains the actual values passed in by the user for things like\n                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n                    { provide: MatDialogConfig, useValue: config },\n                    { provide: DialogConfig, useValue: config },\n                ],\n            },\n            templateContext: () => ({ dialogRef }),\n            providers: (ref, cdkConfig, dialogContainer) => {\n                dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n                dialogRef.updatePosition(config?.position);\n                return [\n                    { provide: this._dialogContainerType, useValue: dialogContainer },\n                    { provide: this._dialogDataToken, useValue: cdkConfig.data },\n                    { provide: this._dialogRefConstructor, useValue: dialogRef },\n                ];\n            },\n        });\n        // This can't be assigned in the `providers` callback, because\n        // the instance hasn't been assigned to the CDK ref yet.\n        dialogRef.componentInstance = cdkRef.componentInstance;\n        this.openDialogs.push(dialogRef);\n        this.afterOpened.next(dialogRef);\n        dialogRef.afterClosed().subscribe(() => {\n            const index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                if (!this.openDialogs.length) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        });\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatDialogBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Injectable });\n_MatDialogBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatDialogBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatDialogBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: undefined }, { type: undefined }, { type: i1$1.OverlayContainer }, { type: undefined }, { type: i0.Type }, { type: i0.Type }, { type: i0.InjectionToken }, { type: undefined }]; } });\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, defaultOptions, scrollStrategy, parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    animationMode) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n    }\n}\nMatDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nMatDialog.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialog });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                    type: Optional\n                }] }, { type: MatDialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DIALOG_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DIALOG_SCROLL_STRATEGY]\n                }] }, { type: MatDialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogClose.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatDialogClose, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }]; }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogTitle, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-dialog-title\" }, exportAs: [\"matDialogTitle\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    host: {\n                        'class': 'mat-dialog-title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }]; }, propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-dialog-content\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-dialog-content' },\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n    constructor() {\n        /**\n         * Horizontal alignment of action buttons.\n         */\n        this.align = 'start';\n    }\n}\nMatDialogActions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogActions, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogActions.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-dialog-actions\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    host: {\n                        'class': 'mat-dialog-actions',\n                        '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogModule, declarations: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogActions,\n        MatDialogContent], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule], exports: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogContent,\n        MatDialogActions,\n        MatCommonModule] });\nMatDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogModule, providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule],\n                    exports: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogContent,\n                        MatDialogActions,\n                        MatCommonModule,\n                    ],\n                    declarations: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogActions,\n                        MatDialogContent,\n                    ],\n                    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations };\n"],"names":["i1","A11yModule","i1$1","Overlay","OverlayConfig","OverlayRef","OverlayModule","_getFocusedElementPierceShadowDom","i3","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","TemplatePortal","PortalModule","DOCUMENT","i0","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","ViewChild","InjectionToken","Injector","TemplateRef","InjectFlags","Injectable","SkipSelf","NgModule","ESCAPE","hasModifierKey","Subject","defer","of","Directionality","startWith","CdkDialogContainer_ng_template_0_Template","rf","ctx","DialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","ariaModal","autoFocus","restoreFocus","closeOnNavigation","closeOnDestroy","throwDialogContentAlreadyAttachedError","Error","CdkDialogContainer","_elementRef","_focusTrapFactory","_document","_config","_interactivityChecker","_ngZone","_overlayRef","_focusMonitor","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","result","_contentAttached","_ariaLabelledBy","_initializeFocusTrap","_handleBackdropClicks","_captureInitialFocus","_trapFocus","ngOnDestroy","_restoreFocus","attachComponentPortal","attachTemplatePortal","_recaptureFocus","_containsFocus","_forceFocus","element","options","isFocusable","tabIndex","runOutsideAngular","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","nativeElement","querySelector","_focusTrap","focusInitialElementWhenReady","then","focusedSuccessfully","_focusDialogContainer","focusConfig","focusTargetElement","activeElement","body","contains","focusVia","destroy","create","backdropClick","subscribe","ɵfac","CdkDialogContainer_Factory","t","ɵɵdirectiveInject","ElementRef","FocusTrapFactory","InteractivityChecker","NgZone","FocusMonitor","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","CdkDialogContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","CdkDialogContainer_HostBindings","ɵɵattribute","id","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","CdkDialogContainer_Template","ɵɵtemplate","dependencies","styles","encapsulation","ɵsetClassMetadata","args","None","changeDetection","Default","host","undefined","decorators","static","DialogRef","overlayRef","config","closed","keydownEvents","outsidePointerEvents","event","keyCode","preventDefault","close","focusOrigin","containerInstance","closedSubject","dispose","next","complete","componentInstance","updatePosition","updateSize","addPanelClass","classes","removePanelClass","DIALOG_SCROLL_STRATEGY","DIALOG_DATA","DEFAULT_DIALOG_CONFIG","DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","block","DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","uniqueId","Dialog","_overlay","_injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_getAfterAllClosed","pipe","_scrollStrategy","afterOpened","open","componentOrTemplateRef","defaults","getDialogById","overlayConfig","_getOverlayConfig","dialogRef","dialogContainer","_attachContainer","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","reverseForEach","dialog","find","state","positionStrategy","position","global","centerHorizontally","centerVertically","direction","minWidth","minHeight","maxWidth","maxHeight","disposeOnNavigation","userInjector","injector","viewContainerRef","providers","useValue","containerType","container","containerPortal","parent","componentFactoryResolver","containerRef","attach","instance","_createInjector","context","$implicit","templateContext","contentRef","fallbackInjector","get","value","change","emitEvent","index","indexOf","splice","forEach","previousValue","setAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","Dialog_Factory","ɵɵinject","OverlayContainer","ɵprov","ɵɵdefineInjectable","token","factory","items","DialogModule","DialogModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","i4","EventEmitter","Directive","Input","MatCommonModule","i2","merge","filter","take","trigger","style","transition","group","animate","query","animateChild","ANIMATION_MODULE_TYPE","MatDialogContainer_ng_template_0_Template","defaultParams","params","enterAnimationDuration","exitAnimationDuration","matDialogAnimations","opacity","transform","optional","MatDialogConfig","delayFocusTrap","_MatDialogContainerBase","elementRef","focusTrapFactory","dialogConfig","interactivityChecker","ngZone","focusMonitor","_animationStateChanged","_openAnimationDone","totalTime","_MatDialogContainerBase_Factory","_MatDialogContainerBase_Template","MatDialogContainer","document","checker","_changeDetectorRef","_state","_onAnimationDone","toState","_onAnimationStart","_startExitAnimation","markForCheck","_getAnimationState","MatDialogContainer_Factory","ChangeDetectorRef","MatDialogContainer_HostBindings","ɵɵsyntheticHostListener","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","ɵɵhostProperty","ɵɵsyntheticHostProperty","MatDialogContainer_Template","animation","animations","MatDialogRef","_ref","_containerInstance","_afterOpened","_beforeClosed","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","_closeDialogVia","dialogResult","detachBackdrop","setTimeout","afterClosed","beforeClosed","strategy","left","right","top","bottom","getState","ref","interactionType","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","_MatDialogBase","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_animationMode","_idPrefix","_dialog","cdkRef","cdkConfig","_closeDialogs","dialogs","_MatDialogBase_Factory","ɵɵinvalidFactory","Type","MatDialog","_location","defaultOptions","parentDialog","animationMode","MatDialog_Factory","Location","dialogElementUid","MatDialogClose","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","_onButtonClick","screenX","screenY","MatDialogClose_Factory","ɵdir","ɵɵdefineDirective","MatDialogClose_HostBindings","ɵɵlistener","MatDialogClose_click_HostBindingHandler","inputs","_matDialogClose","exportAs","ɵɵNgOnChangesFeature","MatDialogTitle","_dialogRef","Promise","resolve","MatDialogTitle_Factory","MatDialogTitle_HostBindings","MatDialogContent","MatDialogContent_Factory","MatDialogActions","align","MatDialogActions_Factory","MatDialogActions_HostBindings","ɵɵclassProp","classList","MatDialogModule","MatDialogModule_Factory"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1]}