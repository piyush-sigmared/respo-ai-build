{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/dashboard/DashboardService.service.ts"],"sourcesContent":["import { HostListener, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Router } from \"@angular/router\";\nimport { map, catchError } from 'rxjs/operators';\n\nimport { HttpClient, HttpRequest, HttpEvent, HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n\n  constructor(\n    public http: HttpClient,\n    public router: Router) { }\n    private gateway = environment.gatewayUrl;\n    private gateway2 = environment.gateway2Url;\n    getDashboard(): Observable<any> {  \n      let url = `${this.gateway}/v1/bias/get_homepage`;\n      return this.http.post(url,{\n        \"project_name\": sessionStorage.getItem('Projectname'),\n        \"module_name\": sessionStorage.getItem('Modulename'),\n        \"test_set_path\": \"string\"\n      }).pipe(map(data => {\n        return data;\n      }))\n    }\n\n    getFormlist(): Observable<any> {  \n      let url = `${this.gateway2}/v1/tprm/get_form`;\n      return this.http.post(url,{\n        \"project_name\": sessionStorage.getItem('Projectname'),\n        \"module_name\": sessionStorage.getItem('Modulename'),\n        \"scope\": \"string\",\n        \"model_name\": \"string\",\n        \"model_framework\": \"string\",\n        \"model_dtype\": \"string\",\n        \"description\": \"string\",\n        \"model_owner\": \"string\",\n        \"email\": \"string\",\n        \"location\": \"string\",\n        \"last_trained_on\": \"string\",\n        \"remarks\": \"string\"\n      }).pipe(map(data => {\n        return data;\n      }))\n    }\n\n    getRisk1(): Observable<any> {  \n      let url = `${this.gateway2}/v1/tprm/get_risk_table`;\n      return this.http.post(url,{}).pipe(map(data => {\n        return data;\n      }))\n    }\n\n\n    LoadPieMajorChart(path:any,cat:any): Observable<any> {  \n      let url = `${this.gateway2}/v1/tprm/getMajorPie`;\n      return this.http.post(url,{\n        \"path\": path,\n        \"major_category\": cat\n      }).pipe(map(data => {\n        return data;\n      }))\n    }\n\n\n    LoadPieMinorChart(path:any,major:any): Observable<any> {  \n      let url = `${this.gateway2}/v1/tprm/getMinorPie`;\n      return this.http.post(url,{\n        \"path\": path,\n      \n        \"major_category\": major\n      }).pipe(map(data => {\n        return data;\n      }))\n    }\n\n\n    getReportTable(path:any,major:any): Observable<any> {  \n      let url = `${this.gateway2}/v1/tprm/getReportTable`;\n      return this.http.post(url,{\n        \"path\": path,\n      \n        \"major_category\": major\n      }).pipe(map(data => {\n        return data;\n      }))\n    }\n\n\n  \n    getVendorreport(): Observable<any> {  \n      let url = `${this.gateway}/v1/compliance/get_vendor_report`;\n      return this.http.post(url,{\n        \"project_name\": sessionStorage.getItem('Projectname'),\n        \"module_name\": sessionStorage.getItem('Modulename'),\n        \"vendor_name\": sessionStorage.getItem('vendor'),\n\n          \"priv\": [\n            \"string\"\n          ],\n          \"Unpriv\": [\n            \"string\"\n          ],\n          \"str_input\": \"string\",\n          \"prot_feat\": \"string\",\n          \"approved\": \"string\",\n          \"score\": \"string\"\n      }).pipe(map(data => {\n        return data;\n      }))\n    }\n    \n    getDataQuality(path:string): Observable<any> {  \n      let url = `${this.gateway}/v1/mlops/get_dataquality`;\n      return this.http.post(url,{\n        \"project_name\": sessionStorage.getItem('Projectname'),\n        \"module_name\": sessionStorage.getItem('Modulename'),\n        \"test_set_path\": path\n      }).pipe(map(data => {\n        return data;\n      }))\n    }\n}\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}